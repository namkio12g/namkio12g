0:00
you know I've been thinking about
0:01
getting into Vim for a bit it seems like
0:03
the Neovim community is really strong
0:04
and it could speed up my experience
0:06
writing and editing code but I have a
0:08
couple things I wish that it did that it
0:10
doesn't i wish it was written in Rust i
0:13
wish that a big company was backing it
0:14
so that we would know it would be there
0:16
forever and I wish it looked a lot more
0:18
like the OG MS DOS days if you're like
0:20
me you're in luck because Microsoft just
0:23
announced edit i can't believe this is a
0:26
real thing but it also legitimately does
0:28
seem kind of cool and I want to go
0:29
through it with you guys and no I was
0:30
not trolling okay I was trolling about
0:32
really wanting this but this is a real
0:34
project by Microsoft microsoft/edit on
0:36
GitHub it is really written in Rust has
0:39
a bunch of contributors it's a simple
0:41
editor for simple needs in the style of
0:44
MS DOS apparently it can only be
0:46
installed on Windows right now
0:48
supposedly but there are other ways to
0:50
get this running from the virtual
0:52
machine that I just paid a big license
0:53
fee for to a Rust build that's floating
0:56
around for Mac and a couple other
0:57
platforms but I just paid a license fee
0:59
for that Windows VM and obviously
1:01
Microsoft's not going to cover the cost
1:02
so uh quick word from today's sponsor
1:04
then we dive in today's sponsor is here
1:06
to help with everyone's favorite topic
1:08
code review okay okay wait don't don't
1:10
skip yet i promise this one's worth it
1:12
because Code Rabbit just put out
1:13
something really cool their VS Code
1:15
extension is incredible and yes it works
1:17
in cursor as well how many times have
1:19
you made a bunch of changes to some code
1:21
and just kind of lost track of what you
1:23
were doing and wanted to make sure
1:24
everything was working as expected or
1:26
better you don't want to put up the PR
1:28
just yet you wanted to know how it was
1:30
ahead of time i'll be honest I've been
1:32
using Code Rabbit for this already by
1:34
just pushing up the PR telling my team
1:36
to not look at it yet and just waiting
1:37
for them to review well they fixed it
1:39
and now I can just click this review all
1:41
changes button in the plug-in in VS Code
1:43
and it will go review that live here
1:46
this is actually my first time trying it
1:47
i wanted to film it because I'm so
1:48
excited to see how this does i made a
1:50
really simple change where I updated an
1:51
effect to not run aggressively because
1:53
it was for doing a migration that we
1:54
didn't want to run more than once and
1:56
let's see what it has to say and look at
1:57
that it caught some things that we
1:58
should probably change i don't even need
2:00
to have their tab open i can just click
2:01
the little comment icon and it will show
2:03
me what it recommends and when it
2:04
recommends making the change here we're
2:06
actually setting the wrong thing i
2:08
should be using the constant that I
2:09
defined earlier good comment let's just
2:12
delete that because it shouldn't have
2:13
been there here suggests we don't update
2:15
the migration flag until the migration
2:16
is run that's probably the right call
2:18
but rules of hooks are annoying and the
2:20
fact this effect can run twice is
2:21
something we need to be considerate of
2:22
this is a thing I should think about
2:23
though and I might not have thought
2:25
about this i might have just innocently
2:26
left this in and now I can at the very
2:28
least leave a comment saying why I did
2:30
this thing that's great this is
2:31
intentionally really small change but
2:33
you could imagine how when you're
2:34
aentically coding giant things using
2:36
cursor or wind surf or whatever else how
2:39
useful it would be to have an assistant
2:40
just look over it once more before you
2:42
push it up i know I'll be using this a
2:44
lot and I hope you guys do too thank you
2:46
Code Rabbit for sponsoring today's video
2:47
check them out today
2:49
it's/codrabbit i could try compiling it
2:51
that would be fun let's do that paste
2:55
error does not support it does not exist
2:58
can't build a standard library see what
3:00
happens if I just add this component my
3:03
first time taking a real like Rust
3:05
project from a different ecosystem and
3:07
building it on a Mac see how how magical
3:09
the multiplat experience is where does
3:12
it output ah it's this one cool chmod
3:19
777/edit aha look at that even a dumbass
3:22
like me can compile this you can create
3:24
new files open them open and close the
3:27
editor you have all the hot keys you
3:29
need control S for save not command S
3:32
don't don't be a Mac person this is a
3:34
Windows product remember so you got to
3:35
reach over slightly if you're a Mac user
3:37
hit that control S control O for open
3:40
option E for edit in order to get into
3:43
this menu you have all of the hotkeys
3:45
you need as a Vim guy undo redo cut copy
3:48
and paste you can jump around the way
3:50
you would expect page up page down what
3:52
else would you need and as you see you
3:54
have all the syntax highlighting you
3:56
need none it's a markdown file you don't
3:58
need highlighting come on it's not that
4:00
useful besides you don't even get any of
4:01
them without installing a plugin
4:03
basically the same thing you just can't
4:05
install plugins because who needs those
4:07
there's a lot here that's interesting at
4:09
least they do have word rap important i
4:12
actually do keep word rap on in my
4:14
editor people think I'm insane but I'm
4:15
also a Tailwind user so I'm kind of
4:17
insane one of the lead devs from the
4:19
project actually commented on it on HN
4:21
and had a lot of good insights I wanted
4:22
to share they built their own custom
4:24
terminal UI library and they did that
4:26
because they wanted to write a plug-in
4:28
model around a C AI i have no idea what
4:31
that even stands for it was application
4:32
binary interface makes sense existing
4:35
terminal UI frameworks that they found
4:36
that were popular usually didn't map
4:38
well to plain C and of the ones they did
4:40
find they were just too large remember
4:42
they have to keep this binary really
4:43
small because it's being bundled in
4:44
Windows the arena allocator exists
4:46
primarily because building trees in Rust
4:48
is quite annoying otherwise it doesn't
4:50
use bump i don't know any of these
4:52
things rust people have fun in the
4:54
comments regarding the choice of Rust I
4:56
actually wrote the prototype in C C++
4:59
Zigg and Rust they wrote it four times
5:01
that's the benefit of a small project
5:03
you can really test different things
5:04
this also kind of confirms my theory
5:06
that they're using this to test stuff
5:07
like Rust out of the four I personally
5:09
liked Zig the most followed by C Rust
5:11
and C++ in that order liking C more than
5:14
Rust is
5:16
hilarious it shows the state of things
5:18
yeah since Zig is not internally
5:21
supported at Microsoft just yet chain of
5:23
trust etc I continued writing it in C
5:25
but after a while I became quite annoyed
5:27
by the lack of features that I came to
5:28
like about Zigg so I ported it to Rust
5:31
over a few days as it is internally
5:33
supported and really not all that bad
5:34
either the reason I didn't like Rust so
5:36
much is because of the rather weak
5:37
allocator support and how difficult
5:39
building trees was also found the lack
5:42
of cursors for linked lists and stable
5:43
Rust rather irritating if I'm being
5:45
honest but I would say that I enjoyed it
5:47
overall really good research to be doing
5:49
internally and also awesome that they're
5:51
sharing this instead of keeping it as
5:52
private internal knowledge talk all the
5:55
you want about Microsoft the fact
5:56
that random employees can work on core
5:58
stuff and just go answer questions on
6:01
Reddit about it and fully open source it
6:02
MIT licensed is really cool there are
6:05
not a lot of Fortune 500 companies that
6:07
give this type of freedom to the
6:09
engineers to just be part of the
6:10
community and do cool because
6:12
Microsoft needs it they have been a
6:14
really good faith player in the open
6:15
source space and I think it's worth
6:17
acknowledging here's where they describe
6:18
why they decided against all of the
6:19
other existing options nano Kilo Micro
6:22
Yori and others what we wanted was a
6:24
small binary so we could ship it with
6:25
all variants of Windows without extra
6:27
justification for the added binary size
6:29
it also needed to have decent Unicode
6:30
support it also should be built around
6:33
VT output as opposed to console APIs to
6:35
allow for seamless integration with SSH
6:37
oh interesting they really want good SSH
6:40
support that's fascinating lastly first
6:43
class support for Windows was obviously
6:45
also quite important out of the listed
6:46
editors Micro was probably the one we
6:48
wanted to use the most but it's just too
6:51
large interesting i was building our own
6:54
editor and while it took me roughly
6:55
twice as long as I had planned it was
6:57
still only about 4 months and a bit
6:59
extra for prototyping last year they
7:01
call out the not invented here syndrome
7:03
of the project NIH that's what it stands
7:05
for it's when companies insist on
7:06
inventing their own thing instead of
7:08
using industry standard but I actually
7:10
think this is a good one there's
7:11
definitely a bit of note invented here
7:13
syndrome in the project but this dev
7:14
also spent all of their weekends on it
7:16
and they think all of Christmas as well
7:18
simply because I had fun working on it
7:20
so why not have fun learning something
7:21
new writing most things myself i
7:23
definitely learned tons which I can now
7:25
use in other projects as well really
7:28
cool this is an awesome project and huge
7:30
shout out to whoever at Microsoft green
7:31
lit this one i'm impressed i came in to
7:34
make fun of it and it's a good project
7:36
so sorry for the intro it's also fully
7:39
open source and I really want to give
7:41
credit for this it's MIT licensed it's
7:43
like no open source microsoft's
7:46
been pretty good about this i mean
7:48
obviously they have been as you guys
7:49
have seen with all the VS Code forks
7:51
that are now giant companies but even
7:53
stuff like Microsoft Terminal which is
7:55
an actually really good terminal on
7:58
Windows this one's written in the much
8:00
C++ instead of the inferior Rust but
8:03
it's also like true proper open- source
8:07
mit licensed as
8:09
well they don't screw around with this
8:12
and the Windows terminal is actually
8:13
really nice which is crazy because I've
8:15
had such a bad terminal experience on
8:16
Windows my entire life it does a bunch
8:19
of little admittedly hacks but those
8:21
hacks allow for things like bash syntax
8:24
to be supported in PowerShell so you can
8:26
do like cd dot dot and it does what it's
8:28
supposed to instead of just breaking
8:31
i'm I have been much happier using
8:34
Windows since the terminal dropped i
8:37
would argue and this sounds insane but I
8:39
do actually believe it windows Terminal
8:41
was a bigger ship for Windows developers
8:44
than Windows Subsystem for Linux in a
8:46
lot of ways because there just wasn't a
8:48
pleasant terminal experience before
8:50
almost every Windows dev I knew was
8:52
using the terminal in their IDE because
8:54
the terminal apps for Windows were trash
8:57
now there's a decent one like an
8:58
actually decent one and edit might not
9:02
be that but it is a cool effort to take
9:05
something that is so core to Windows and
9:07
show what it would look like if they
9:08
were to have created it today and as you
9:10
see this came from the Windows terminal
9:12
team so my super spicy hot take is this
9:15
might be the team's exploration of Rust
9:18
because they've used C++ in most things
9:20
in the past this is entirely in Rust
9:22
like 100%
9:25
100.0 fully Rust let's see what they
9:28
have to say edits a new command line
9:30
text editor in Windows they say in
9:32
Windows but as you saw it works great in
9:33
Mac you just have to build it yourself
9:35
edits open source so you can build the
9:36
code or install the latest version from
9:38
GitHub this CLI text editor will be
9:40
available to preview in the Windows
9:41
Insider program in the coming months
9:43
after that it will ship as part of
9:45
Windows 11 this is going to be the
9:47
built-in edit flow in Windows they
9:50
already have a crappy edit like or do
9:52
they oh apparently the only built-in
9:54
editor for text files in Windows
9:55
historically has actually been Notepad i
9:59
assumed it had some type of terminal
10:01
editor like when I saw the screenshot I
10:03
just assumed it was a a port or a
10:05
rewrite of an existing thing it's not
10:07
this is actually a all new thing oh so
10:10
the classic MS DOSS editor no that's
10:11
what I thought but I can't use this
10:13
right now so they removed the original
10:16
MS DOS editor this makes more sense it
10:19
was also 300 kilobytes before and now
10:21
it's like 280 so they've maintained
10:23
their bar there too which is really cool
10:25
but apparently this has not been a thing
10:27
in 64-bit Windows ever and it got killed
10:30
starting with Windows 10 which is sad
10:31
but that's why they brought it back so
10:33
what are the features it's lightweight
10:35
it's less than 250K for the Windows
10:36
build which is nuts so they can just
10:38
throw it into Windows cuz like think
10:40
about how anal Microsoft has to be about
10:42
keeping the Windows image size from
10:44
continuing to bloat anything you can do
10:46
to trim it is seen as a positive and
10:48
anything you want to add to it will have
10:50
a ton of fighting it has to go through
10:52
but if it's 250K much more likely to
10:55
sneak through and if they're also doing
10:56
this to start experimenting with Rust
10:58
internally it makes even more sense they
11:00
also have mouse mode support i'm curious
11:03
how that works in Mac it does fully okay
11:07
that's actually really nice that I can
11:09
just click and get to a specific place
11:12
and select text can I select and delete
11:15
oh that's actually good this is just
11:18
better Notepad then if you're trying to
11:21
get good like mouse-based text control
11:24
in your CLI written in Rust this was
11:27
probably a really good reference repo to
11:29
look at which is crazy but they had to
11:31
keep it small in order to hit that small
11:33
binary size so it's probably not even
11:35
that big a codebase let me quickly clock
11:37
it yeah it's only 16k lines of code of
11:40
like actual Rust code barely that's a
11:42
relatively small codebase that's
11:44
actually worth learning things from
11:45
multiple files is cool find and replace
11:48
not trivial word rap also very not
11:51
trivial in a terminal UI that's still
11:54
why this is why they said they felt the
11:57
need to build another CLI editor what
11:58
motivated us to build edit was the need
12:00
for a default CLI text editor in 64-bit
12:02
versions of Windows 32-bit versions of
12:04
Windows ship with the MS DOSS editor but
12:06
64-bit versions do not have a CLI editor
12:09
installed in Box from there we narrow
12:11
down our options many of you are
12:12
probably familiar with the how do I exit
12:14
Vim meme while it is relatively simple
12:16
to learn the magic exit commands
12:18
certainly not a coincidence that this
12:20
often turns up as a stumbling block for
12:22
new and old programmers alike because we
12:24
wanted to avoid this for a built-in
12:25
default editor they wanted to be like
12:27
nano we decided that we wanted a
12:29
modeless editor for Windows versus a
12:31
modal editor where new users would have
12:33
to remember different modes of operation
12:34
and how to switch between them i agree
12:36
if you've only ever used a traditional
12:38
IDE or like notepads and text editors
12:41
the idea of having two modes to switch
12:43
between is a hurdle to get over but that
12:45
does as they say limit their choices to
12:48
a list of editors that either have no
12:50
first party support for Windows or they
12:51
were too big to bundle them with every
12:53
version of the OS i would be surprised
12:55
if Nano had good support for Windows
12:57
even if it is small so this checks out
13:00
the small footprint is less than 300
13:02
kilobytes could we run a Windows
13:03
terminal my guess is the Windows
13:05
terminal version for Windows might have
13:07
to end up being bigger and they wanted
13:08
more control makes sense though i'm
13:10
pretty sure that this makes Windows the
13:12
only operating system that ships with
13:14
C++ code C code assembly code Rust code
13:19
and React Native code pretty funny that
13:22
the start menu is written in React
13:23
Native and the terminal editor is
13:25
written in Rust but that's the world
13:26
we're in today the results are actually
13:28
pretty cool i am impressed i came into
13:31
this to meme as you probably could tell
13:33
from the intro but it's not bad the
13:36
functionality it has is legit the
13:38
codebase seems like a good reference and
13:40
this might be the start of Microsoft
13:42
adopting Rust more heavily internally i
13:45
see a lot of cool stuff here i don't
13:47
think this is going to actually become
13:48
the editor that people use to write code
13:50
i don't think this is going to replace
13:51
Neoim or anything like that i just think
13:53
it's a cool effort that we can
13:55
potentially learn a lot from and I have
13:57
a lot of respect to the people at
13:58
Microsoft who decided that this needed
14:00
to be built and instead of making a
14:02
quick crappy CLI or just forking
14:04
something and removing the branding they
14:05
built something new from scratch that we
14:07
can all benefit from as an ecosystem so
14:09
shout out to the people at Microsoft who
14:11
decided to do this who green lit it and
14:12
also of course the ones who built it
14:14
there's a long list of different editors
14:16
that come out of Microsoft and this is
14:18
one of the coolest ones yet let me know
14:20
what you guys think

